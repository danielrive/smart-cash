### GH Workflow TEMPLATE to deploy terraform in different environments
name: terraform deploy template
on:
  workflow_call:
    inputs:
      AWS_REGION:
        description: 'aws region where the resources will be deployed'
        required: true
        type: string
      ENVIRONMENT:
        description: 'Environment Name'
        required: true
        type: string
      PROJECT_NAME:
        description: 'Project name, this name will be used to assign aws tags to the resources'
        required: true
        type: string
      TERRAFORM_VERSION:
        description: 'The terraform version to use, this is downloaded during the installation in the GH runner'
        required: false
        type: string
        default: '1.4.6'
      STAGE:
        description: 'folder name corresponding to the stage to deploy, this must follow an order, starting from base'
        required: true
        type: string
      AWS_IAM_ROLE_GH:
        description: 'folder name corresponding to the stage to deploy, this must follow an order, starting from base'
        required: true
        type: string
    secrets: 
      AWS_ACCOUNT_NUMBER:
        description: 'The AWS account number where the resources will be deployed, this is a GitHub secret and is used to pass IAM roles and avoid hardcode the number in the code'
        required: true
      GH_TOKEN_FLUX:
         description: 'GH token created for GitOps repository, this token will be used for Flux'
         required: true

### Define General env variables
env:
  ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
  AWS_REGION: ${{ inputs.AWS_REGION }}
  PROJECT_NAME: ${{ inputs.PROJECT_NAME }}
  TERRAFORM_VERSION: ${{ inputs.TERRAFORM_VERSION }}

jobs:

## Execute the terraform Plan, this is a call to a composite action.
  terraform-plan:
    runs-on: ubuntu-latest
    outputs:
      PLAN_EXIT_CODE: ${{ steps.terraform-plan.outputs.PLAN_EXIT_CODE }}
    steps:
      - name: checkout-repo
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/${{ inputs.AWS_IAM_ROLE_GH }}'
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: terraform plan
        id: terraform-plan
        uses: ./.github/actions/terraform-plan
        with:
          WORKING_DIRECTORY: '/infra/terraform/${{ inputs.STAGE}}'
          STAGE: ${{ inputs.STAGE }}

## Execute the terraform Plan, this is a call to a composite action, this job only will be executed when the event is a push, this allow to review the plan in a PR and then execute the apply in the merge.
  terraform-apply:
    if: needs.terraform-plan.outputs.PLAN_EXIT_CODE != 0
    runs-on: ubuntu-latest
    needs: terraform-plan
    steps:
      - name: check-output
        id: check-output
        shell: bash
        run: |
            echo "${{ needs.terraform-plan.outputs.PLAN_EXIT_CODE }}"
      - name: checkout-repo
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: 'arn:aws:iam::${{ secrets.AWS_ACCOUNT_NUMBER }}:role/${{ inputs.AWS_IAM_ROLE_GH }}'
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      - name: terraform apply
        id: tf-apply
        uses: ./.github/actions/terraform-apply
        with:
          WORKING_DIRECTORY: '/infra/terraform/${{ inputs.STAGE}}'
          STAGE: ${{ inputs.STAGE }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_FLUX }}